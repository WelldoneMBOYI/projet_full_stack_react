{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\Apprend_programmation_dossier\\\\React_full_stack_site\\\\site-full-stack\\\\reaclient\\\\src\\\\context\\\\index.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useMemo, useState } from \"react\";\nimport { getPosts, insertPost } from \"../service\";\n\n// useContext est un hook personnalisé\n// useMemo retourne une val memorisée\n// useState pour créer des val locales qui vont devenir globales par la suite\n/**Creation de l'objet context qui nous donne acces à deux \r\n * composants : Provider et Consumer qu'on ne va pas utiliser dans cet exemple\r\n * on le met dans le composant principal AppProvider qui se trouve au plus au niveau\r\n * de l'appli, de la hierarchie de l'appli\r\n * et va permettre aux composants descendants de souscrire et de\r\n * d'acceder à des variables globales, cà-d un etat global\r\n * Provider prends une seule props qui se nomme value\r\n * c'est cette props (propriet\") qui ve permettre de partager \r\n * avec le reste de l'appli des var globales\r\n * Toute la logique de l'appli se trouve au niveau du context\r\n * \r\n * par la suite, on enveloppe le point d'entree de l'appli\r\n * par le composant AppProvider pour permettre à tous les composants descendants\r\n * de souscrire au context pour acceder aux valeurs globales\r\n  */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nconst {\n  Provider\n} = AppContext;\nconst AppProvider = ({\n  children\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const fetchPosts = () => {\n    getPosts().then(setPosts);\n  };\n  const addPost = body => {\n    insertPost(body).then(setPosts);\n  };\n  const value = useMemo(() => {\n    return {\n      posts,\n      fetchPosts\n\n      // addPost\n    };\n    // }, [posts, fetchPosts, addPost])\n  }, [posts, fetchPosts]);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n/** useAppContext est un hook personnalisé, le role de ce hook\r\n * on va pouvoir l'utilisant dans les composants fonctionnels, on\r\n *  va pouvoir reutiliser la logique. Il prend en paramettres\r\n * le AppContext definit plus haut.\r\n * \r\n * plus loin dans le composant List, au lieu de faire des \r\n * appels reseaux directement, à la place on va permet au \r\n * composant de s'abonner au changement du context avec \r\n * et on utilise useAppContext\r\n*/\n_s(AppProvider, \"Atrw1zVh6MOf7KS0rN+72L5scsE=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["createContext","useContext","useMemo","useState","getPosts","insertPost","jsxDEV","_jsxDEV","AppContext","Provider","AppProvider","children","_s","posts","setPosts","fetchPosts","then","addPost","body","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","$RefreshReg$"],"sources":["C:/Users/HP/Documents/Apprend_programmation_dossier/React_full_stack_site/site-full-stack/reaclient/src/context/index.js"],"sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\"\r\nimport { getPosts, insertPost } from \"../service\"\r\n\r\n// useContext est un hook personnalisé\r\n// useMemo retourne une val memorisée\r\n// useState pour créer des val locales qui vont devenir globales par la suite\r\n/**Creation de l'objet context qui nous donne acces à deux \r\n * composants : Provider et Consumer qu'on ne va pas utiliser dans cet exemple\r\n * on le met dans le composant principal AppProvider qui se trouve au plus au niveau\r\n * de l'appli, de la hierarchie de l'appli\r\n * et va permettre aux composants descendants de souscrire et de\r\n * d'acceder à des variables globales, cà-d un etat global\r\n * Provider prends une seule props qui se nomme value\r\n * c'est cette props (propriet\") qui ve permettre de partager \r\n * avec le reste de l'appli des var globales\r\n * Toute la logique de l'appli se trouve au niveau du context\r\n * \r\n * par la suite, on enveloppe le point d'entree de l'appli\r\n * par le composant AppProvider pour permettre à tous les composants descendants\r\n * de souscrire au context pour acceder aux valeurs globales\r\n  */\r\nconst AppContext = createContext();\r\nconst { Provider } = AppContext;\r\n\r\nconst AppProvider = ({ children}) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    const fetchPosts = () => {\r\n        getPosts().then(setPosts)\r\n    }\r\n    const addPost = (body) => {\r\n        insertPost(body).then(setPosts)\r\n    }\r\n    const value = useMemo(() => {\r\n        return {\r\n            posts, \r\n            fetchPosts, \r\n            \r\n            // addPost\r\n        }\r\n    // }, [posts, fetchPosts, addPost])\r\n    }, [posts, fetchPosts])\r\n    return <Provider value={value}>{children}</Provider>\r\n}\r\n\r\n/** useAppContext est un hook personnalisé, le role de ce hook\r\n * on va pouvoir l'utilisant dans les composants fonctionnels, on\r\n *  va pouvoir reutiliser la logique. Il prend en paramettres\r\n * le AppContext definit plus haut.\r\n * \r\n * plus loin dans le composant List, au lieu de faire des \r\n * appels reseaux directement, à la place on va permet au \r\n * composant de s'abonner au changement du context avec \r\n * et on utilise useAppContext\r\n*/\r\nexport const useAppContext = () => {\r\n    return useContext(AppContext);\r\n}\r\n\r\nexport default AppProvider;"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpE,SAASC,QAAQ,EAAEC,UAAU,QAAQ,YAAY;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,SAAAC,MAAA,IAAAC,OAAA;AAeA,MAAMC,UAAU,gBAAGR,aAAa,CAAC,CAAC;AAClC,MAAM;EAAES;AAAS,CAAC,GAAGD,UAAU;AAE/B,MAAME,WAAW,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,UAAU,GAAGA,CAAA,KAAM;IACrBX,QAAQ,CAAC,CAAC,CAACY,IAAI,CAACF,QAAQ,CAAC;EAC7B,CAAC;EACD,MAAMG,OAAO,GAAIC,IAAI,IAAK;IACtBb,UAAU,CAACa,IAAI,CAAC,CAACF,IAAI,CAACF,QAAQ,CAAC;EACnC,CAAC;EACD,MAAMK,KAAK,GAAGjB,OAAO,CAAC,MAAM;IACxB,OAAO;MACHW,KAAK;MACLE;;MAEA;IACJ,CAAC;IACL;EACA,CAAC,EAAE,CAACF,KAAK,EAAEE,UAAU,CAAC,CAAC;EACvB,oBAAOR,OAAA,CAACE,QAAQ;IAACU,KAAK,EAAEA,KAAM;IAAAR,QAAA,EAAEA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATAX,EAAA,CArBMF,WAAW;AAAAc,EAAA,GAAXd,WAAW;AA+BjB,OAAO,MAAMe,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,OAAOzB,UAAU,CAACO,UAAU,CAAC;AACjC,CAAC;AAAAkB,GAAA,CAFYD,aAAa;AAI1B,eAAef,WAAW;AAAC,IAAAc,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}