{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\Apprend_programmation_dossier\\\\React_full_stack_site\\\\site-full-stack\\\\reaclient\\\\src\\\\components\\\\List.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport data from \"../data\";\nimport { getPosts } from \"../service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function List() {\n  _s();\n  // useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\n  // useState crée une var local et une fction getteur qui met à jour cette var\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    getPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-5\",\n    children: data.map(itm => {\n      // Remplacer chaque element par un tiret\n      //  const title = post?.title.split(\" \").join(\"-\");\n      const title = itm.title.split(\" \").join(\"-\");\n      //  Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\n      const content = `${itm.content.substring(0, 10)} ...`;\n      return (\n        /*#__PURE__*/\n        // Toute iteration avec react, il faut tjrs lui fournir une clef\n        // qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/post/${title}`,\n              state: {\n                id: itm._id\n              },\n              children: itm.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this)]\n        }, itm._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n_s(List, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useEffect","useState","Link","data","getPosts","jsxDEV","_jsxDEV","List","_s","posts","setPosts","className","children","map","itm","title","split","join","content","substring","to","state","id","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/Apprend_programmation_dossier/React_full_stack_site/site-full-stack/reaclient/src/components/List.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport data from \"../data\"\r\nimport { getPosts } from \"../service\"\r\n\r\nexport default function List(){\r\n    // useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\r\n    // useState crée une var local et une fction getteur qui met à jour cette var\r\n    \r\n    const [posts, setPosts] = useState( [] )\r\n    useEffect(() => {\r\n        getPosts()\r\n    }, [])\r\n    return(\r\n        <div className=\"mt-5\">\r\n            {/* map() c'est pour faire des iterations */}\r\n            {data.map(itm => {\r\n                // Remplacer chaque element par un tiret\r\n                //  const title = post?.title.split(\" \").join(\"-\");\r\n                 const title = itm.title.split(\" \").join(\"-\");\r\n                //  Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\r\n                const content = `${itm.content.substring(0, 10)} ...`\r\n                return(\r\n                    // Toute iteration avec react, il faut tjrs lui fournir une clef\r\n                    // qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\r\n                    <div key={itm._id}>\r\n                         {/* <h3><Link to=\"/post/title\">{itm.title}</Link></h3> */}\r\n                         {/* <h3><Link to={`/post/${title}`} state={{id : post._id}}>{post.title}</Link></h3> */}\r\n                         {/* state permet de transmettre des paramettres exemples :id etc qui seront recuperer \r\n                         au niveau du composant enfant par useLocation*/}\r\n                         <h3><Link to={`/post/${title}`} state={{id : itm._id}}>{itm.title}</Link></h3>\r\n                        {/* <h3>{itm.title}</h3> */}\r\n                        <p>{content}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div> \r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,QAAQ,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,IAAIA,CAAA,EAAE;EAAAC,EAAA;EAC1B;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAE,EAAG,CAAC;EACxCD,SAAS,CAAC,MAAM;IACZI,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EACN,oBACIE,OAAA;IAAKK,SAAS,EAAC,MAAM;IAAAC,QAAA,EAEhBT,IAAI,CAACU,GAAG,CAACC,GAAG,IAAI;MACb;MACA;MACC,MAAMC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAC7C;MACA,MAAMC,OAAO,GAAG,GAAGJ,GAAG,CAACI,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM;MACrD;QAAA;QACI;QACA;QACAb,OAAA;UAAAM,QAAA,gBAKKN,OAAA;YAAAM,QAAA,eAAIN,OAAA,CAACJ,IAAI;cAACkB,EAAE,EAAE,SAASL,KAAK,EAAG;cAACM,KAAK,EAAE;gBAACC,EAAE,EAAGR,GAAG,CAACS;cAAG,CAAE;cAAAX,QAAA,EAAEE,GAAG,CAACC;YAAK;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAE/ErB,OAAA;YAAAM,QAAA,EAAIM;UAAO;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAPVb,GAAG,CAACS,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQZ;MAAC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACnB,EAAA,CAjCuBD,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}