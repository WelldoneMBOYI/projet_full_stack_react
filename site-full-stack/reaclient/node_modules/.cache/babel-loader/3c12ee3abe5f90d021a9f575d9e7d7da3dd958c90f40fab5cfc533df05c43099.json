{"ast":null,"code":"import React from\"react\";import{Link}from\"react-router-dom\";import{useAppContext}from\"../context\";// import data from \"../data\";\n// import { getPosts } from \"../service\";\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function List(){// useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\n// useState crée une var local et une fction getteur qui met à jour cette var\n// par defaut un tableau vide une val initiale\n// const [posts, setPosts] = useState( [] )\n// then retourne une promesse\n// En retour de cette promesse, on aura le resultat, une collection des posts\nconst{posts}=useAppContext();// debugger\n// On va lancer maintenant la requete dans App\n// useEffect(() => {\n//     getPosts().then(setPosts)\n// }, [])\n// Assurez-vous que posts est bien un tableau\nconst safePosts=Array.isArray(posts)?posts:[];return/*#__PURE__*/_jsx(\"div\",{className:\"mt-5\",children:safePosts.map(post=>{// Remplacer chaque element par un tiret\nconst title=post===null||post===void 0?void 0:post.title.split(\" \").join(\"-\");// Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\nconst content=\"\".concat(post===null||post===void 0?void 0:post.content.substring(0,100),\" ...\");return/*#__PURE__*/ (// Toute iteration avec react, il faut tjrs lui fournir une clef\n// qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\n_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(Link,{to:\"/post/\".concat(title),state:{id:post._id},children:post.title})}),/*#__PURE__*/_jsx(\"p\",{children:content})]},post._id));})});}","map":{"version":3,"names":["React","Link","useAppContext","jsx","_jsx","jsxs","_jsxs","List","posts","safePosts","Array","isArray","className","children","map","post","title","split","join","content","concat","substring","to","state","id","_id"],"sources":["C:/Users/HP/Documents/Apprend_programmation_dossier/React_full_stack_site/site-full-stack/reaclient/src/components/List.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppContext } from \"../context\";\r\n// import data from \"../data\";\r\n// import { getPosts } from \"../service\";\r\n\r\nexport default function List(){\r\n    // useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\r\n    // useState crée une var local et une fction getteur qui met à jour cette var\r\n    // par defaut un tableau vide une val initiale\r\n    // const [posts, setPosts] = useState( [] )\r\n    // then retourne une promesse\r\n    // En retour de cette promesse, on aura le resultat, une collection des posts\r\n\r\n    const { posts } = useAppContext();\r\n    // debugger\r\n    // On va lancer maintenant la requete dans App\r\n    // useEffect(() => {\r\n    //     getPosts().then(setPosts)\r\n    // }, [])\r\n\r\n    // Assurez-vous que posts est bien un tableau\r\n    const safePosts = Array.isArray(posts) ? posts : [];\r\n\r\n    return(\r\n        <div className=\"mt-5\">\r\n            {/* map() c'est pour faire des iterations */}\r\n            {/* {data.map(itm => { */}\r\n            {/* On fait maintenant l'iteration sur posts et non sur data\r\n            qui etait juste une var de test */}\r\n            {safePosts.map(post => {\r\n                // Remplacer chaque element par un tiret\r\n                const title = post?.title.split(\" \").join(\"-\");\r\n                // Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\r\n                const content = `${post?.content.substring(0, 100)} ...`;\r\n                return(\r\n                    // Toute iteration avec react, il faut tjrs lui fournir une clef\r\n                    // qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\r\n                    <div key={post._id}>\r\n                        {/* <h3><Link to=\"/post/title\">{itm.title}</Link></h3> */}\r\n                        {/* <h3><Link to={`/post/${title}`} state={{id : post._id}}>{post.title}</Link></h3> */}\r\n                        {/* state permet de transmettre des paramettres exemples :id etc qui seront recuperer \r\n                        au niveau du composant enfant par useLocation*/}\r\n                        <h3><Link to={`/post/${title}`} state={{id: post._id}}>{post.title}</Link></h3>\r\n                        {/* <h3>{itm.title}</h3> */}\r\n                        <p>{content}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div> \r\n    )\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,IAAI,KAAQ,kBAAkB,CACvC,OAASC,aAAa,KAAQ,YAAY,CAC1C;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEA,cAAe,SAAS,CAAAC,IAAIA,CAAA,CAAE,CAC1B;AACA;AACA;AACA;AACA;AACA;AAEA,KAAM,CAAEC,KAAM,CAAC,CAAGN,aAAa,CAAC,CAAC,CACjC;AACA;AACA;AACA;AACA;AAEA;AACA,KAAM,CAAAO,SAAS,CAAGC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,CAAGA,KAAK,CAAG,EAAE,CAEnD,mBACIJ,IAAA,QAAKQ,SAAS,CAAC,MAAM,CAAAC,QAAA,CAKhBJ,SAAS,CAACK,GAAG,CAACC,IAAI,EAAI,CACnB;AACA,KAAM,CAAAC,KAAK,CAAGD,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAC9C;AACA,KAAM,CAAAC,OAAO,IAAAC,MAAA,CAAML,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEI,OAAO,CAACE,SAAS,CAAC,CAAC,CAAE,GAAG,CAAC,QAAM,CACxD,oBACI;AACA;AACAf,KAAA,QAAAO,QAAA,eAKIT,IAAA,OAAAS,QAAA,cAAIT,IAAA,CAACH,IAAI,EAACqB,EAAE,UAAAF,MAAA,CAAWJ,KAAK,CAAG,CAACO,KAAK,CAAE,CAACC,EAAE,CAAET,IAAI,CAACU,GAAG,CAAE,CAAAZ,QAAA,CAAEE,IAAI,CAACC,KAAK,CAAO,CAAC,CAAI,CAAC,cAE/EZ,IAAA,MAAAS,QAAA,CAAIM,OAAO,CAAI,CAAC,GAPVJ,IAAI,CAACU,GAQV,CAAC,EAEd,CAAC,CAAC,CACD,CAAC,CAEd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}