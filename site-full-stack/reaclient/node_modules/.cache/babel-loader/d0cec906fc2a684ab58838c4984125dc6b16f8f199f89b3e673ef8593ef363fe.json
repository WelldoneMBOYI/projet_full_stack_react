{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\Apprend_programmation_dossier\\\\React_full_stack_site\\\\site-full-stack\\\\reaclient\\\\src\\\\components\\\\List.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAppContext } from \"../context\";\n// import data from \"../data\";\n// import { getPosts } from \"../service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function List() {\n  _s();\n  // useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\n  // useState crée une var local et une fction getteur qui met à jour cette var\n  // par defaut un tableau vide une val initiale\n  // const [posts, setPosts] = useState( [] )\n  // then retourne une promesse\n  // En retour de cette promesse, on aura le resultat, une collection des posts\n\n  const {\n    posts\n  } = useAppContext();\n\n  // On va lancer maintenant la requete dans App\n  // useEffect(() => {\n  //     getPosts().then(setPosts)\n  // }, [])\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-5\",\n    children: posts.map(post => {\n      // Remplacer chaque element par un tiret\n      //  const title = post?.title.split(\" \").join(\"-\");\n      const title = post === null || post === void 0 ? void 0 : post.title.split(\" \").join(\"-\");\n      //  Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\n      const content = `${post === null || post === void 0 ? void 0 : post.content.substring(0, 10)} ...`;\n      return (\n        /*#__PURE__*/\n        // Toute iteration avec react, il faut tjrs lui fournir une clef\n        // qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/post/${title}`,\n              state: {\n                id: post._id\n              },\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)]\n        }, post._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_s(List, \"f+j+ByqrsqJ56r8sGNNBfbxL1Ts=\", false, function () {\n  return [useAppContext];\n});\n_c = List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useEffect","useState","Link","useAppContext","jsxDEV","_jsxDEV","List","_s","posts","className","children","map","post","title","split","join","content","substring","to","state","id","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/Apprend_programmation_dossier/React_full_stack_site/site-full-stack/reaclient/src/components/List.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAppContext } from \"../context\";\r\n// import data from \"../data\";\r\n// import { getPosts } from \"../service\";\r\n\r\nexport default function List(){\r\n    // useEffet, useState sont de hooks: utilise les effets de bord au moment du chargement une seule fois\r\n    // useState crée une var local et une fction getteur qui met à jour cette var\r\n    // par defaut un tableau vide une val initiale\r\n    // const [posts, setPosts] = useState( [] )\r\n    // then retourne une promesse\r\n    // En retour de cette promesse, on aura le resultat, une collection des posts\r\n\r\n    const { posts } = useAppContext()\r\n    \r\n    // On va lancer maintenant la requete dans App\r\n    // useEffect(() => {\r\n    //     getPosts().then(setPosts)\r\n    // }, [])\r\n    return(\r\n        <div className=\"mt-5\">\r\n            {/* map() c'est pour faire des iterations */}\r\n            {/* {data.map(itm => { */}\r\n            {/* On fait maintenant l'iteration sur posts et non sur data\r\n            qui etait juste une var de test */}\r\n            {posts.map(post => {\r\n                // Remplacer chaque element par un tiret\r\n                //  const title = post?.title.split(\" \").join(\"-\");\r\n                 const title = post?.title.split(\" \").join(\"-\");\r\n                //  Afficher seulement 100 caractere et du contenu static ... avec $ et les tirles\r\n                const content = `${post?.content.substring(0, 10)} ...`\r\n                return(\r\n                    // Toute iteration avec react, il faut tjrs lui fournir une clef\r\n                    // qui va permettre d'optimiser le rerender uniquement l'element concerné par le changement\r\n                    <div key={post._id}>\r\n                         {/* <h3><Link to=\"/post/title\">{itm.title}</Link></h3> */}\r\n                         {/* <h3><Link to={`/post/${title}`} state={{id : post._id}}>{post.title}</Link></h3> */}\r\n                         {/* state permet de transmettre des paramettres exemples :id etc qui seront recuperer \r\n                         au niveau du composant enfant par useLocation*/}\r\n                         <h3><Link to={`/post/${title}`} state={{id : post._id}}>{post.title}</Link></h3>\r\n                        {/* <h3>{itm.title}</h3> */}\r\n                        <p>{content}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div> \r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,aAAa,QAAQ,YAAY;AAC1C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,IAAIA,CAAA,EAAE;EAAAC,EAAA;EAC1B;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM;IAAEC;EAAM,CAAC,GAAGL,aAAa,CAAC,CAAC;;EAEjC;EACA;EACA;EACA;EACA,oBACIE,OAAA;IAAKI,SAAS,EAAC,MAAM;IAAAC,QAAA,EAKhBF,KAAK,CAACG,GAAG,CAACC,IAAI,IAAI;MACf;MACA;MACC,MAAMC,KAAK,GAAGD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAC/C;MACA,MAAMC,OAAO,GAAG,GAAGJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM;MACvD;QAAA;QACI;QACA;QACAZ,OAAA;UAAAK,QAAA,gBAKKL,OAAA;YAAAK,QAAA,eAAIL,OAAA,CAACH,IAAI;cAACgB,EAAE,EAAE,SAASL,KAAK,EAAG;cAACM,KAAK,EAAE;gBAACC,EAAE,EAAGR,IAAI,CAACS;cAAG,CAAE;cAAAX,QAAA,EAAEE,IAAI,CAACC;YAAK;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAEjFpB,OAAA;YAAAK,QAAA,EAAIM;UAAO;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAPVb,IAAI,CAACS,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQb;MAAC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAClB,EAAA,CA1CuBD,IAAI;EAAA,QAQNH,aAAa;AAAA;AAAAuB,EAAA,GARXpB,IAAI;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}