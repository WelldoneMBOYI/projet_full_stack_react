{"ast":null,"code":"import{createContext,useContext,useMemo,useState}from\"react\";import{getPosts,insertPost}from\"../service\";// useContext est un hook personnalisé\n// useMemo retourne une val memorisée\n// useState pour créer des val locales qui vont devenir globales par la suite\n/**Creation de l'objet context qui nous donne acces à deux \r\n * composants : Provider et Consumer qu'on ne va pas utiliser dans cet exemple\r\n * on le met dans le composant principal AppProvider qui se trouve au plus au niveau\r\n * de l'appli, de la hierarchie de l'appli\r\n * et va permettre aux composants descendants de souscrire et de\r\n * d'acceder à des variables globales, cà-d un etat global\r\n * Provider prends une seule props qui se nomme value\r\n * c'est cette props (propriet\") qui ve permettre de partager \r\n * avec le reste de l'appli des var globales\r\n * Toute la logique de l'appli se trouve au niveau du context\r\n * \r\n * par la suite, on enveloppe le point d'entree de l'appli\r\n * par le composant AppProvider pour permettre à tous les composants descendants\r\n * de souscrire au context pour acceder aux valeurs globales\r\n  */import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();const{Provider}=AppContext;const AppProvider=_ref=>{let{children}=_ref;const[posts,setPosts]=useState([]);const fetchPosts=()=>{getPosts().then(setPosts);};const addPost=body=>{insertPost(body).then(setPosts);};const value=useMemo(()=>{return{posts,fetchPosts,// Rendre disponible le addPost\naddPost};// On le rajout dans les dependances puisqu'on va l'utiliser à l'exterieur du context\n},[posts,fetchPosts,addPost]);return/*#__PURE__*/_jsx(Provider,{value:value,children:children});};/** useAppContext est un hook personnalisé, le role de ce hook\r\n * on va pouvoir l'utilisant dans les composants fonctionnels, on\r\n *  va pouvoir reutiliser la logique. Il prend en paramettres\r\n * le AppContext definit plus haut.\r\n * \r\n * plus loin dans le composant List, au lieu de faire des \r\n * appels reseaux directement, à la place on va permet au \r\n * composant de s'abonner au changement du context avec \r\n * et on utilise useAppContext\r\n*/export const useAppContext=()=>{return useContext(AppContext);};export default AppProvider;","map":{"version":3,"names":["createContext","useContext","useMemo","useState","getPosts","insertPost","jsx","_jsx","AppContext","Provider","AppProvider","_ref","children","posts","setPosts","fetchPosts","then","addPost","body","value","useAppContext"],"sources":["C:/Users/HP/Documents/Apprend_programmation_dossier/React_full_stack_site/site-full-stack/reaclient/src/context/index.js"],"sourcesContent":["import { createContext, useContext, useMemo, useState } from \"react\"\r\nimport { getPosts, insertPost } from \"../service\"\r\n\r\n// useContext est un hook personnalisé\r\n// useMemo retourne une val memorisée\r\n// useState pour créer des val locales qui vont devenir globales par la suite\r\n/**Creation de l'objet context qui nous donne acces à deux \r\n * composants : Provider et Consumer qu'on ne va pas utiliser dans cet exemple\r\n * on le met dans le composant principal AppProvider qui se trouve au plus au niveau\r\n * de l'appli, de la hierarchie de l'appli\r\n * et va permettre aux composants descendants de souscrire et de\r\n * d'acceder à des variables globales, cà-d un etat global\r\n * Provider prends une seule props qui se nomme value\r\n * c'est cette props (propriet\") qui ve permettre de partager \r\n * avec le reste de l'appli des var globales\r\n * Toute la logique de l'appli se trouve au niveau du context\r\n * \r\n * par la suite, on enveloppe le point d'entree de l'appli\r\n * par le composant AppProvider pour permettre à tous les composants descendants\r\n * de souscrire au context pour acceder aux valeurs globales\r\n  */\r\nconst AppContext = createContext();\r\nconst { Provider } = AppContext;\r\n\r\nconst AppProvider = ({ children}) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    const fetchPosts = () => {\r\n        getPosts().then(setPosts)\r\n    }\r\n    const addPost = (body) => {\r\n        insertPost(body).then(setPosts)\r\n    }\r\n    const value = useMemo(() => {\r\n        return {\r\n            posts, \r\n            fetchPosts, \r\n            // Rendre disponible le addPost\r\n            addPost\r\n        }\r\n        // On le rajout dans les dependances puisqu'on va l'utiliser à l'exterieur du context\r\n    }, [posts, fetchPosts, addPost])\r\n    return <Provider value={value}>{children}</Provider>\r\n}\r\n\r\n/** useAppContext est un hook personnalisé, le role de ce hook\r\n * on va pouvoir l'utilisant dans les composants fonctionnels, on\r\n *  va pouvoir reutiliser la logique. Il prend en paramettres\r\n * le AppContext definit plus haut.\r\n * \r\n * plus loin dans le composant List, au lieu de faire des \r\n * appels reseaux directement, à la place on va permet au \r\n * composant de s'abonner au changement du context avec \r\n * et on utilise useAppContext\r\n*/\r\nexport const useAppContext = () => {\r\n    return useContext(AppContext);\r\n}\r\n\r\nexport default AppProvider;"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CACpE,OAASC,QAAQ,CAAEC,UAAU,KAAQ,YAAY,CAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAdA,OAAAC,GAAA,IAAAC,IAAA,yBAeA,KAAM,CAAAC,UAAU,cAAGR,aAAa,CAAC,CAAC,CAClC,KAAM,CAAES,QAAS,CAAC,CAAGD,UAAU,CAE/B,KAAM,CAAAE,WAAW,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,QAAQ,CAAC,CAAAD,IAAA,CAC5B,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAY,UAAU,CAAGA,CAAA,GAAM,CACrBX,QAAQ,CAAC,CAAC,CAACY,IAAI,CAACF,QAAQ,CAAC,CAC7B,CAAC,CACD,KAAM,CAAAG,OAAO,CAAIC,IAAI,EAAK,CACtBb,UAAU,CAACa,IAAI,CAAC,CAACF,IAAI,CAACF,QAAQ,CAAC,CACnC,CAAC,CACD,KAAM,CAAAK,KAAK,CAAGjB,OAAO,CAAC,IAAM,CACxB,MAAO,CACHW,KAAK,CACLE,UAAU,CACV;AACAE,OACJ,CAAC,CACD;AACJ,CAAC,CAAE,CAACJ,KAAK,CAAEE,UAAU,CAAEE,OAAO,CAAC,CAAC,CAChC,mBAAOV,IAAA,CAACE,QAAQ,EAACU,KAAK,CAAEA,KAAM,CAAAP,QAAA,CAAEA,QAAQ,CAAW,CAAC,CACxD,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,MAAO,MAAM,CAAAQ,aAAa,CAAGA,CAAA,GAAM,CAC/B,MAAO,CAAAnB,UAAU,CAACO,UAAU,CAAC,CACjC,CAAC,CAED,cAAe,CAAAE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}